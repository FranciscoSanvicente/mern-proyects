{"version":3,"sources":["context/alertas/alertaContext.js","context/autenticacion/authContext.js","components/auth/Login.js","components/auth/NuevaCuenta.js","context/proyectos/proyectoContext.js","components/proyectos/NuevoProyecto.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListadoProyectos.js","components/layout/Sidebar.js","components/layout/Barra.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListadoTareas.js","components/proyectos/Proyectos.js","context/proyectos/proyectoReducer.js","types/index.js","config/axios.js","context/proyectos/proyectoState.js","context/tareas/tareaReducer.js","context/tareas/tareaState.js","context/alertas/alertaReducer.js","context/alertas/alertaState.js","context/autenticacion/authReducer.js","config/token.js","context/autenticacion/authState.js","components/rutas/RutaPrivada.js","App.js","serviceWorker.js","index.js"],"names":["alertaContext","createContext","authContext","Login","props","useContext","AlertaContext","alerta","mostrarAlerta","AuthContext","mensaje","autenticado","iniciarSesion","useEffect","history","push","msg","categoria","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","top","className","cascade","onSubmit","preventDefault","trim","htmlFor","type","id","placeholder","to","NuevaCuenta","registrarUsuario","nombre","confirmar","bottom","length","proyectoContext","NuevoProyecto","proyectosContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","onClick","tareaContext","Proyecto","proyectoActual","obtenerTareas","_id","ListadoProyectos","proyectos","obtenerProyectos","TransitionGroup","map","CSSTransition","key","timeout","classNames","Sidebar","Barra","usuarioAutenticado","cerrarSesion","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","right","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","estado","seleccionarTarea","ListadoTareas","eliminarProyecto","tareasproyecto","Proyectos","state","action","payload","filter","clienteAxios","axios","create","baseURL","process","ProyectoState","useReducer","proyectoReducer","dispatch","a","get","resultado","data","post","console","log","proyectoId","delete","Provider","children","TareaState","TareaReducer","params","tareas","put","AlertaState","alertaReducer","setTimeout","localStorage","setItem","token","cargando","removeItem","tokenAuth","defaults","headers","common","AuthState","initialState","getItem","AuthReducer","datos","respuesta","response","RutaPrivada","Component","component","render","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1e46b4a.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst alertaContext = createContext();\r\n\r\nexport default alertaContext;","import { createContext } from 'react';\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Slide from 'react-reveal/Slide';\r\nimport Zoom from 'react-reveal/Zoom';\r\n\r\nimport AlertaContext from '../../context/alertas/alertaContext';\r\nimport AuthContext from '../../context/autenticacion/authContext';\r\n\r\nconst Login = (props) => {\r\n\r\n    // extraer los valores del context\r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta } = alertaContext;\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { mensaje, autenticado, iniciarSesion } = authContext;\r\n\r\n      // En caso de que el password o usuario no exista\r\n      useEffect(() => {\r\n        if(autenticado) {\r\n            props.history.push('/proyectos');\r\n        }\r\n\r\n        if(mensaje) {\r\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [mensaje, autenticado, props.history]);\r\n\r\n    // State para iniciar sesión\r\n    const [usuario, guardarUsuario] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    // extraer de usuario\r\n    const { email, password } = usuario;\r\n\r\n    const onChange = e => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // Cuando el usuario quiere iniciar sesión\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar que no haya campos vacios\r\n        if(email.trim() === '' || password.trim() === '') {\r\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\r\n        }\r\n\r\n        // Pasarlo al action\r\n        iniciarSesion({ email, password });\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <Slide top>\r\n        <div className=\"form-usuario\">\r\n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\r\n            <Zoom cascade>\r\n            <div className=\"contenedor-form sombra-dark\">\r\n                <h1>Iniciar Sesión</h1>\r\n             \r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input \r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu Email\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input \r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu Password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Iniciar Sesión\" />\r\n                    </div>\r\n                </form>\r\n              \r\n                <Link to={'/nueva-cuenta'} className=\"enlace-cuenta\">\r\n                    Obtener Cuenta\r\n                </Link>\r\n            </div>\r\n            </Zoom>\r\n        </div>\r\n        </Slide>\r\n     );\r\n}\r\n \r\nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Fade from 'react-reveal/Fade';\r\nimport AlertaContext from '../../context/alertas/alertaContext';\r\nimport AuthContext from '../../context/autenticacion/authContext';\r\n\r\nconst NuevaCuenta = (props) => {\r\n\r\n    // extraer los valores del context\r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta } = alertaContext;\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { mensaje, autenticado,  registrarUsuario } = authContext;\r\n\r\n    // En caso de que el usuario se haya autenticado o registrado o sea un registro duplicado\r\n    useEffect(() => {\r\n        if(autenticado) {\r\n            props.history.push('/proyectos');\r\n        }\r\n\r\n        if(mensaje) {\r\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [mensaje, autenticado, props.history]);\r\n\r\n    // State para iniciar sesión\r\n    const [usuario, guardarUsuario] = useState({\r\n        nombre: '',\r\n        email: '',\r\n        password: '',\r\n        confirmar: ''\r\n    });\r\n\r\n    // extraer de usuario\r\n    const { nombre, email, password, confirmar } = usuario;\r\n\r\n    const onChange = e => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // Cuando el usuario quiere iniciar sesión\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar que no haya campos vacios\r\n        if( nombre.trim() === '' || \r\n            email.trim() === '' || \r\n            password.trim() === '' || \r\n            confirmar.trim() === '' ) {\r\n                mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\r\n                return;\r\n            }\r\n\r\n        // Password minimo de 6 caracteres\r\n        if(password.length < 6) {\r\n            mostrarAlerta('El password debe ser de al menos 6 caracteres', 'alerta-error');\r\n            return;\r\n        }\r\n\r\n        // Los 2 passwords son iguales\r\n        if(password !== confirmar) {\r\n            mostrarAlerta('Los passwords no son iguales', 'alerta-error');\r\n            return;\r\n        }\r\n\r\n        // Pasarlo al action\r\n        registrarUsuario({\r\n            nombre, \r\n            email, \r\n            password\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <Fade bottom>\r\n        <div className=\"form-usuario\">\r\n            { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\r\n            <Fade bottom cascade>\r\n            <div className=\"contenedor-form sombra-dark\">\r\n                <h1>Obtener una cuenta</h1>\r\n\r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"nombre\">Nombre</label>\r\n                        <input \r\n                            type=\"text\"\r\n                            id=\"nombre\"\r\n                            name=\"nombre\"\r\n                            placeholder=\"Tu Nombre\"\r\n                            value={nombre}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input \r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu Email\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input \r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu Password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"confirmar\">Confirmar Password</label>\r\n                        <input \r\n                            type=\"password\"\r\n                            id=\"confirmar\"\r\n                            name=\"confirmar\"\r\n                            placeholder=\"Repite tu Password\"\r\n                            value={confirmar}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Registrarme\" />\r\n                    </div>\r\n                </form>\r\n\r\n                <Link to={'/'} className=\"enlace-cuenta\">\r\n                    Volver a Iniciar Sesión\r\n                </Link>\r\n            </div>\r\n            </Fade>\r\n        </div>\r\n        </Fade>\r\n     );\r\n}\r\n \r\nexport default NuevaCuenta;","import { createContext } from 'react';\r\n\r\nconst proyectoContext = createContext();\r\n\r\nexport default proyectoContext;","import React, { Fragment, useState, useContext } from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\n\r\nconst NuevoProyecto = () => {\r\n\r\n    // Obtener el state del formulario\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { formulario, errorformulario,  mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext;\r\n\r\n\r\n    // State para Proyecto\r\n    const [proyecto, guardarProyecto] = useState({\r\n        nombre: ''\r\n    });\r\n\r\n    // Extraer nombre de proyecto\r\n    const { nombre } = proyecto;\r\n\r\n    // Lee los contenidos del input\r\n    const onChangeProyecto = e => {\r\n        guardarProyecto({\r\n            ...proyecto,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // Cuando el usuario envia un proyecto\r\n    const onSubmitProyecto = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar el proyecto\r\n        if(nombre === '') {\r\n            mostrarError();\r\n            return;\r\n        }\r\n\r\n        // agregar al state\r\n        agregarProyecto(proyecto)\r\n\r\n        // Reiniciar el form\r\n        guardarProyecto({\r\n            nombre: ''\r\n        })\r\n    }\r\n\r\n    // Mostrar el formulario\r\n    const onClickFormulario = () => {\r\n        mostrarFormulario();\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            {/* <Fade bottom cascade> */}\r\n            <Fade bottom >\r\n            <button \r\n                type=\"button\"\r\n                className=\"btn btn-block btn-primario\"\r\n                onClick={ onClickFormulario }\r\n            >Nuevo Proyecto</button></Fade>\r\n\r\n            { formulario ? \r\n                    (   <Fade bottom cascade>\r\n                        <form\r\n                            className=\"formulario-nuevo-proyecto\"\r\n                            onSubmit={onSubmitProyecto}\r\n                        >\r\n                            <input \r\n                                type=\"text\"\r\n                                className=\"input-text\"\r\n                                placeholder=\"Nombre Proyecto\"\r\n                                name=\"nombre\"\r\n                                value={nombre}\r\n                                onChange={onChangeProyecto}\r\n                            />\r\n\r\n                            <input \r\n                                type=\"submit\"\r\n                                className=\"btn btn-primario btn-block\"\r\n                                value=\"Agregar Proyecto\"\r\n                            />\r\n\r\n                        </form>\r\n                        </Fade>\r\n                ) : null }\r\n\r\n            { errorformulario ? <p className=\"mensaje error\">El nombre del Proyecto es obligatorio</p>  : null }\r\n        {/* </Fade>     */}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default NuevoProyecto;","import { createContext } from 'react';\r\n\r\nconst tareaContext = createContext();\r\n\r\nexport default tareaContext;","import React, { useContext } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst Proyecto = ({proyecto}) => {\r\n    // Obtener el state de proyectos\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyectoActual } = proyectosContext;\r\n\r\n    // obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { obtenerTareas } = tareasContext;\r\n\r\n    // Función para agregar el proyecto actual\r\n    const seleccionarProyecto = id => {\r\n        proyectoActual(id); // Fijar un proyecto actual\r\n        obtenerTareas(id); // Filtrar las tareas cuando se de click\r\n    }\r\n\r\n    return ( \r\n        <li>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-blank\"\r\n                onClick={ () => seleccionarProyecto(proyecto._id) }\r\n            >{proyecto.nombre} </button>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Proyecto;","import React, { useContext, useEffect } from 'react';\r\nimport Proyecto from './Proyecto';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport AlertaContext from '../../context/alertas/alertaContext';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\nconst ListadoProyectos = () => {\r\n\r\n    // Extrar proyectos de state inicial\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { mensaje, proyectos, obtenerProyectos } = proyectosContext;\r\n\r\n    const alertaContext = useContext(AlertaContext);\r\n    const { alerta, mostrarAlerta } = alertaContext;\r\n\r\n    // Obtener proyectos cuando carga el componente\r\n    useEffect(() => {\r\n        // si hay un error\r\n        if(mensaje) {\r\n            mostrarAlerta(mensaje.msg, mensaje.categoria);\r\n        }\r\n\r\n        obtenerProyectos();\r\n        // eslint-disable-next-line\r\n    }, [mensaje]);\r\n\r\n    // revisar si proyectos tiene contenido\r\n    if(proyectos.length === 0 ) return <p>No hay proyectos, comienza creando uno</p>;\r\n\r\n    return ( \r\n\r\n        <ul className=\"listado-proyectos\">\r\n            \r\n        \r\n            { alerta   ? ( <div className={`alerta ${alerta.categoria} `}>{alerta.msg}</div>  ) : null  }\r\n\r\n\r\n            <TransitionGroup>\r\n                {proyectos.map(proyecto => (\r\n                    <CSSTransition\r\n                        key={proyecto._id}\r\n                        timeout={200}\r\n                        classNames=\"proyecto\"\r\n                    >\r\n                        <Proyecto \r\n                            proyecto={proyecto}\r\n                        />\r\n                    </CSSTransition>\r\n                ))}\r\n            </TransitionGroup>\r\n        </ul>\r\n     );\r\n}\r\n \r\nexport default ListadoProyectos;","import React from 'react';\r\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\r\nimport ListadoProyectos from '../proyectos/ListadoProyectos';\r\n\r\nconst Sidebar = () => {\r\n    return ( \r\n        <aside>\r\n            <h1>MERN<span>Tasks</span></h1>\r\n\r\n            <NuevoProyecto />\r\n\r\n            <div className=\"proyectos\">\r\n                <h2>Tus Proyectos</h2>\r\n                <ListadoProyectos />\r\n            </div>\r\n        </aside>\r\n     );\r\n}\r\n \r\nexport default Sidebar;","import React, {useContext, useEffect} from 'react';\r\nimport AuthContext from '../../context/autenticacion/authContext';\r\n\r\n\r\nconst Barra = () => {\r\n\r\n    // Extraer la información de autenticación\r\n    const authContext = useContext(AuthContext);\r\n    const { usuario, usuarioAutenticado, cerrarSesion  } = authContext;\r\n\r\n    useEffect(() => {\r\n        usuarioAutenticado();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n\r\n    return ( \r\n        <header className=\"app-header\">\r\n            {usuario ? <p className=\"nombre-usuario\">Hola <span>{usuario.nombre} </span> </p> : null}\r\n            \r\n\r\n            <nav className=\"nav-principal\">\r\n                <button \r\n                    className=\"btn btn-blank cerrar-sesion\"\r\n                    onClick={() => cerrarSesion() }\r\n                >Cerrar Sesión</button>\r\n            </nav>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Barra;","import React, { useContext, useState, useEffect } from 'react';\r\nimport Rotate from 'react-reveal/Rotate';  \r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst FormTarea = () => {\r\n\r\n    // Extrar si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n\r\n    // obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareaseleccionada,  errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\r\n\r\n    // Effect que detecta si hay una tarea seleccionada\r\n    useEffect(() => {\r\n        if(tareaseleccionada !== null) {\r\n            guardarTarea(tareaseleccionada)\r\n        } else {\r\n            guardarTarea({\r\n                nombre: ''\r\n            })\r\n        }\r\n    }, [  tareaseleccionada]); \r\n\r\n    // State del formulario\r\n    const [tarea, guardarTarea] = useState({\r\n        nombre: ''\r\n    })\r\n\r\n    // extraer el nombre del proyecto\r\n    const { nombre } = tarea;\r\n\r\n    // Si no hay proyecto seleccionado\r\n    if(!proyecto) return null;\r\n\r\n    // Array destructuring para extraer el proyecto actual\r\n    const [proyectoActual] =  proyecto;\r\n\r\n    // Leer los valores del formulario\r\n    const handleChange = e => {\r\n        guardarTarea({\r\n            ...tarea,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // validar\r\n        if(nombre.trim() === '' ) {\r\n            validarTarea();\r\n            return;\r\n        }\r\n\r\n        // Si es edición o si es nueva tarea\r\n        if(tareaseleccionada === null ) {\r\n            // agregar la nueva tarea al state de tareas\r\n            tarea.proyecto = proyectoActual._id;\r\n            agregarTarea(tarea);\r\n        } else {\r\n            // actualizar tarea existente\r\n            actualizarTarea(tarea);\r\n\r\n            // Elimina tareaseleccionada del state\r\n            limpiarTarea();\r\n        }\r\n        // Obtener y filtrar las tareas del proyecto actual\r\n        obtenerTareas(proyectoActual.id);\r\n\r\n        // reiniciar el form\r\n        guardarTarea({\r\n            nombre: ''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <Rotate top right>\r\n        <div className=\"formulario\">\r\n            <form\r\n                onSubmit={onSubmit}\r\n            >\r\n                <div className=\"contenedor-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre Tarea...\"\r\n                        name=\"nombre\"\r\n                        value={nombre}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"contenedor-input\">\r\n                    <input \r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-submit btn-block\"\r\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\r\n                    />\r\n                </div>\r\n            </form>\r\n\r\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p> : null }\r\n        </div>\r\n        </Rotate>\r\n     );\r\n}\r\n \r\nexport default FormTarea;","import React, { useContext } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst Tarea = ({tarea}) => {\r\n\r\n    // Extrar si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n\r\n    // obtener la función del context de tarea\r\n    const tareasContext = useContext(tareaContext);\r\n    const { eliminarTarea, obtenerTareas, actualizarTarea, guardarTareaActual } = tareasContext;\r\n\r\n\r\n    // Extraer el proyecto\r\n    const [proyectoActual] = proyecto;\r\n \r\n    // Función que se ejecuta cuando el usuario presiona el btn de eliminar tarea\r\n    const tareaEliminar = id => {\r\n        eliminarTarea(id, proyectoActual._id);\r\n        obtenerTareas(proyectoActual.id)\r\n    }\r\n\r\n    // Función que modifica el estado de las tareas\r\n    const cambiarEstado = tarea => {\r\n        if(tarea.estado) {\r\n            tarea.estado = false;\r\n        } else {\r\n            tarea.estado = true\r\n        }\r\n        actualizarTarea(tarea);\r\n    }\r\n\r\n    // Agrega una tarea actual cuando el usuario desea editarla\r\n    const seleccionarTarea = tarea => {\r\n        guardarTareaActual(tarea);\r\n    }\r\n\r\n    return ( \r\n        <li className=\"tarea sombra\">\r\n            <p>{tarea.nombre} </p>\r\n\r\n            <div className=\"estado\">\r\n                {tarea.estado \r\n                ?  \r\n                    (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"completo\"\r\n                            onClick={() => cambiarEstado(tarea)}\r\n                        >Completo</button>\r\n                    )\r\n                : \r\n                    (\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"incompleto\"\r\n                            onClick={() => cambiarEstado(tarea)}\r\n                        >Incompleto</button>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <div className=\"acciones\">\r\n                <button \r\n                    type=\"button\"\r\n                    className=\"btn btn-primario\"\r\n                    onClick={() => seleccionarTarea(tarea) }\r\n                >Editar</button>\r\n\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secundario\"\r\n                    onClick={() => tareaEliminar(tarea._id)}\r\n                >Eliminar</button>\r\n            </div>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Tarea;","import React, { Fragment, useContext} from 'react';\r\nimport Slide from 'react-reveal/Slide';\r\nimport Tarea from './Tarea';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ListadoTareas = () => {\r\n\r\n    // Extrar proyectos de state inicial\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto, eliminarProyecto } = proyectosContext;\r\n\r\n    // obtener las tareas del proyecto\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareasproyecto } = tareasContext;\r\n\r\n    // Si no hay proyecto seleccionado\r\n    if(!proyecto) return <h2>Selecciona un proyecto</h2>;\r\n\r\n    // Array destructuring para extraer el proyecto actual\r\n    const [proyectoActual] =  proyecto;\r\n\r\n    // Elimina un proyecto\r\n    const onClickEliminar = () => {\r\n        eliminarProyecto(proyectoActual._id)\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <Slide right cascade>\r\n            <h2>Proyecto: {proyectoActual.nombre} </h2>\r\n\r\n            <ul className=\"listado-tareas\">\r\n                {tareasproyecto.length === 0 \r\n                    ? (<li className=\"tarea\"><p>No hay tareas</p></li>) \r\n                    : \r\n                    <TransitionGroup>\r\n                    {tareasproyecto.map(tarea => (\r\n                        <CSSTransition\r\n                            key={tarea.id}\r\n                            timeout={200}\r\n                            classNames=\"tarea\"\r\n                        >\r\n                            <Tarea \r\n                                tarea={tarea}\r\n                            />\r\n                        </CSSTransition>\r\n                    ))}\r\n                    </TransitionGroup>\r\n                }\r\n            </ul>\r\n\r\n            <button     \r\n                type=\"button\"\r\n                className=\"btn btn-eliminar\"\r\n                onClick={onClickEliminar}\r\n            >Eliminar Proyecto &times;</button>\r\n            </Slide>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default ListadoTareas;","import React, { useContext, useEffect } from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport Sidebar from '../layout/Sidebar';\r\nimport Barra from '../layout/Barra';\r\nimport FormTarea from '../tareas/FormTarea';\r\nimport ListadoTareas from '../tareas/ListadoTareas';\r\nimport AuthContext from '../../context/autenticacion/authContext';\r\n\r\nconst Proyectos = () => {\r\n\r\n    // Extraer la información de autenticación\r\n    const authContext = useContext(AuthContext);\r\n    const { usuarioAutenticado } = authContext;\r\n\r\n    useEffect(() => {\r\n        usuarioAutenticado();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <Zoom>\r\n             <Zoom cascade>\r\n        <div className=\"contenedor-app\">\r\n            <Sidebar />\r\n\r\n            <div className=\"seccion-principal\">\r\n                <Barra />\r\n\r\n                <main>\r\n                    <FormTarea />\r\n\r\n                    <div className=\"contenedor-tareas\">\r\n                        <ListadoTareas />\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        </div>\r\n        </Zoom>\r\n        </Zoom>\r\n     );\r\n}\r\n \r\nexport default Proyectos;","import { \r\n    FORMULARIO_PROYECTO, \r\n    OBTENER_PROYECTOS,\r\n    AGREGAR_PROYECTO,\r\n    PROYECTO_ERROR,\r\n    VALIDAR_FORMULARIO,\r\n    PROYECTO_ACTUAL,\r\n    ELIMINAR_PROYECTO\r\n} from '../../types';\r\n\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case FORMULARIO_PROYECTO:\r\n            return {\r\n                ...state,\r\n                formulario: true\r\n            }\r\n        case OBTENER_PROYECTOS:\r\n            return {\r\n                ...state,\r\n                proyectos: action.payload\r\n            }\r\n        case AGREGAR_PROYECTO:\r\n            return {\r\n                ...state,\r\n                proyectos: [...state.proyectos, action.payload],\r\n                formulario: false,\r\n                errorformulario: false\r\n            }\r\n        case VALIDAR_FORMULARIO:\r\n            return {\r\n                ...state, \r\n                errorformulario: true\r\n            }\r\n        case PROYECTO_ACTUAL:\r\n            return {\r\n                ...state,\r\n                proyecto: state.proyectos.filter(proyecto => proyecto._id === action.payload )\r\n            }\r\n        case ELIMINAR_PROYECTO:\r\n            return {\r\n                ...state,\r\n                proyectos: state.proyectos.filter(proyecto => proyecto._id !== action.payload ),\r\n                proyecto: null\r\n            }\r\n        case PROYECTO_ERROR:\r\n            return {\r\n                ...state,\r\n                mensaje: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","export const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO'\r\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS'\r\nexport const AGREGAR_PROYECTO = 'AGREGAR_PROYECTO';\r\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\r\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\r\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\r\nexport const PROYECTO_ERROR = 'PROYECTO_ERROR';\r\n\r\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\r\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\r\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\r\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\r\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\r\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\r\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';\r\n\r\nexport const MOSTRAR_ALERTA = 'MOSTRAR_ALERTA';\r\nexport const OCULTAR_ALERTA = 'OCULTAR_ALERTA';\r\n\r\nexport const REGISTRO_EXITOSO = 'REGISTRO_EXITOSO';\r\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\r\nexport const OBTENER_USUARIO = 'OBTENER_USUARIO';\r\nexport const LOGIN_EXITOSO = 'LOGIN_EXITOSO';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const CERRAR_SESION = 'CERRAR_SESION';","import axios from 'axios';\r\n\r\nconst clienteAxios = axios.create({\r\n    baseURL : process.env.REACT_APP_BACKEND_URL\r\n});\r\n\r\nexport default clienteAxios;","import React, { useReducer } from 'react';\r\n\r\nimport proyectoContext from './proyectoContext';\r\nimport proyectoReducer from './proyectoReducer';\r\nimport { \r\n    FORMULARIO_PROYECTO, \r\n    OBTENER_PROYECTOS,\r\n    AGREGAR_PROYECTO,\r\n    PROYECTO_ERROR,\r\n    VALIDAR_FORMULARIO,\r\n    PROYECTO_ACTUAL,\r\n    ELIMINAR_PROYECTO\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\n\r\nconst ProyectoState = props => {\r\n\r\n    const initialState = {\r\n        proyectos : [],\r\n        formulario : false,\r\n        errorformulario: false,\r\n        proyecto: null, \r\n        mensaje: null\r\n    }\r\n\r\n    // Dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\r\n\r\n    // Serie de funciones para el CRUD\r\n    const mostrarFormulario = () => {\r\n        dispatch({\r\n            type: FORMULARIO_PROYECTO\r\n        })\r\n    }\r\n\r\n    // Obtener los proyectos\r\n    const obtenerProyectos = async () => {\r\n        try {\r\n            const resultado = await clienteAxios.get('/api/proyectos');\r\n\r\n            dispatch({\r\n                type: OBTENER_PROYECTOS,\r\n                payload: resultado.data.proyectos\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            \r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Agregar nuevo proyecto\r\n    const agregarProyecto = async proyecto => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/proyectos', proyecto);\r\n            console.log(resultado);\r\n            // Insertar el proyecto en el state\r\n            dispatch({\r\n                type: AGREGAR_PROYECTO,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            \r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Valida el formulario por errores\r\n    const mostrarError = () => {\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    } \r\n\r\n    // Selecciona el Proyecto que el usuario dio click\r\n    const proyectoActual = proyectoId => {\r\n        dispatch({\r\n            type: PROYECTO_ACTUAL,\r\n            payload: proyectoId\r\n        })\r\n    }\r\n\r\n    // Elimina un proyecto\r\n    const eliminarProyecto = async proyectoId => {\r\n        try {\r\n            await clienteAxios.delete(`/api/proyectos/${proyectoId}`);\r\n            dispatch({\r\n                type: ELIMINAR_PROYECTO,\r\n                payload: proyectoId\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            \r\n            dispatch({\r\n                type: PROYECTO_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <proyectoContext.Provider\r\n            value={{\r\n                proyectos: state.proyectos,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                proyecto: state.proyecto,\r\n                mensaje: state.mensaje,\r\n                mostrarFormulario,\r\n                obtenerProyectos,\r\n                agregarProyecto,\r\n                mostrarError,\r\n                proyectoActual,\r\n                eliminarProyecto\r\n            }}\r\n        >\r\n            {props.children}\r\n        </proyectoContext.Provider>\r\n        \r\n    )\r\n}\r\n\r\nexport default ProyectoState;","import { \r\n    TAREAS_PROYECTO,\r\n    AGREGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIZAR_TAREA,\r\n    LIMPIAR_TAREA\r\n} from '../../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case TAREAS_PROYECTO:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: action.payload\r\n            }\r\n        case AGREGAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: [action.payload, ...state.tareasproyecto],\r\n                errortarea: false\r\n            }\r\n        case VALIDAR_TAREA:\r\n            return {\r\n                ...state,\r\n                errortarea: true\r\n            }\r\n        case ELIMINAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload )\r\n            }\r\n        case ACTUALIZAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload : tarea )\r\n            }\r\n        case TAREA_ACTUAL:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: action.payload\r\n            }\r\n        case LIMPIAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport TareaContext from './tareaContext';\r\nimport TareaReducer from './tareaReducer';\r\n\r\nimport { \r\n    TAREAS_PROYECTO,\r\n    AGREGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIZAR_TAREA,\r\n    LIMPIAR_TAREA\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst TareaState = props => {\r\n    const initialState = {\r\n        tareasproyecto: [],\r\n        errortarea: false,\r\n        tareaseleccionada: null\r\n    }\r\n\r\n    // Crear dispatch y state\r\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\r\n\r\n    // Crear las funciones\r\n\r\n    // Obtener las tareas de un proyecto\r\n    const obtenerTareas = async proyecto => {\r\n\r\n        console.log(proyecto);\r\n\r\n        try {\r\n            const resultado = await clienteAxios.get('/api/tareas', { params: { proyecto }});\r\n            console.log(resultado);\r\n            dispatch({\r\n                type: TAREAS_PROYECTO,\r\n                payload: resultado.data.tareas\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Agregar una tarea al proyecto seleccionado\r\n    const agregarTarea = async tarea => {\r\n        console.log(tarea);\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/tareas', tarea);\r\n            console.log(resultado);\r\n            dispatch({\r\n                type: AGREGAR_TAREA,\r\n                payload: tarea\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Valida y muestra un error en caso de que sea necesario\r\n    const validarTarea = () => {\r\n        dispatch({\r\n            type: VALIDAR_TAREA\r\n        })\r\n    }\r\n\r\n    // Eliminar tarea por id\r\n    const eliminarTarea = async (id, proyecto) => {\r\n        try {\r\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto }});\r\n            dispatch({\r\n                type: ELIMINAR_TAREA,\r\n                payload: id\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    // Edita o modifica una tarea\r\n    const actualizarTarea = async tarea => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\r\n            \r\n            dispatch({\r\n                type: ACTUALIZAR_TAREA,\r\n                payload: resultado.data.tarea\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Extrae una tarea para edición\r\n    const guardarTareaActual = tarea => {\r\n        dispatch({\r\n            type: TAREA_ACTUAL,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n\r\n\r\n    // Elimina la tareaseleccionada\r\n    const limpiarTarea = () => {\r\n        dispatch({\r\n            type: LIMPIAR_TAREA\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TareaContext.Provider\r\n            value={{\r\n                tareasproyecto : state.tareasproyecto,\r\n                errortarea: state.errortarea,\r\n                tareaseleccionada: state.tareaseleccionada,\r\n                obtenerTareas,\r\n                agregarTarea,\r\n                validarTarea,\r\n                eliminarTarea,\r\n                guardarTareaActual,\r\n                actualizarTarea,\r\n                limpiarTarea\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TareaContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TareaState;","import { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case MOSTRAR_ALERTA:\r\n            return {\r\n                alerta: action.payload\r\n            }\r\n        case OCULTAR_ALERTA:\r\n            return {\r\n                alerta: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport alertaReducer from './alertaReducer';\r\nimport alertaContext from './alertaContext';\r\n\r\nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA} from '../../types';\r\n\r\nconst AlertaState = props => {\r\n    const initialState = {\r\n        alerta: null\r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(alertaReducer, initialState);\r\n\r\n    // Funciones\r\n    const mostrarAlerta = (msg, categoria) => {\r\n        dispatch({\r\n            type:  MOSTRAR_ALERTA,\r\n            payload: {\r\n                msg, \r\n                categoria\r\n            }\r\n        });\r\n\r\n        // Después de 5 segundos limpiar la alerta\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 5000);\r\n    }\r\n\r\n\r\n    return (\r\n        <alertaContext.Provider\r\n            value={{\r\n                alerta: state.alerta,\r\n                mostrarAlerta\r\n            }}\r\n        > \r\n            {props.children}\r\n        </alertaContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AlertaState;","import { \r\n    REGISTRO_EXITOSO,\r\n    REGISTRO_ERROR,\r\n    OBTENER_USUARIO,\r\n    LOGIN_EXITOSO,\r\n    LOGIN_ERROR,\r\n    CERRAR_SESION\r\n} from '../../types';\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case REGISTRO_EXITOSO:\r\n        case LOGIN_EXITOSO:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                autenticado: true,\r\n                mensaje: null,\r\n                cargando: false\r\n            }\r\n        case OBTENER_USUARIO: \r\n            return {\r\n                ...state,\r\n                autenticado: true,\r\n                usuario: action.payload, \r\n                cargando: false\r\n            }\r\n        case CERRAR_SESION:\r\n        case LOGIN_ERROR:\r\n        case REGISTRO_ERROR:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                usuario: null,\r\n                autenticado: null,\r\n                mensaje: action.payload, \r\n                cargando: false\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import clienteAxios from './axios';\r\n\r\nconst tokenAuth = token => {\r\n    if(token) {\r\n        clienteAxios.defaults.headers.common['x-auth-token'] = token;\r\n    } else {\r\n        delete clienteAxios.defaults.headers.common['x-auth-token'];\r\n    }\r\n}\r\n\r\nexport default tokenAuth;","import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\n\r\nimport clienteAxios from '../../config/axios';\r\nimport tokenAuth from '../../config/token';\r\n\r\nimport { \r\n    REGISTRO_EXITOSO,\r\n    REGISTRO_ERROR,\r\n    OBTENER_USUARIO,\r\n    LOGIN_EXITOSO,\r\n    LOGIN_ERROR,\r\n    CERRAR_SESION\r\n} from '../../types';\r\n\r\nconst AuthState = props => {\r\n    const initialState = {\r\n        token: localStorage.getItem('token'),\r\n        autenticado: null,\r\n        usuario: null, \r\n        mensaje: null, \r\n        cargando: true\r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(AuthReducer, initialState);\r\n\r\n    const registrarUsuario = async datos => {\r\n        try {\r\n\r\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\r\n            console.log(respuesta.data);\r\n\r\n            dispatch({\r\n                type: REGISTRO_EXITOSO,\r\n                payload: respuesta.data\r\n            });\r\n\r\n            // Obtener el usuario\r\n            usuarioAutenticado();\r\n        } catch (error) {\r\n            // console.log(error.response.data.msg);\r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: REGISTRO_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Retorna el usuario autenticado\r\n    const usuarioAutenticado = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if(token) {\r\n            tokenAuth(token);\r\n        }\r\n\r\n        try {\r\n            const respuesta = await clienteAxios.get('/api/auth');\r\n            // console.log(respuesta);\r\n            dispatch({\r\n                type: OBTENER_USUARIO,\r\n                payload: respuesta.data.usuario\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error.response);\r\n            dispatch({\r\n                type: LOGIN_ERROR\r\n            })\r\n        }\r\n    }\r\n\r\n    // Cuando el usuario inicia sesión\r\n    const iniciarSesion = async datos => {\r\n        try {\r\n            const respuesta = await clienteAxios.post('/api/auth', datos);\r\n            \r\n            dispatch({\r\n                type: LOGIN_EXITOSO,\r\n                payload: respuesta.data\r\n            });\r\n\r\n            // Obtener el usuario\r\n            usuarioAutenticado();\r\n        } catch (error) {\r\n            console.log(error.response.data.msg);\r\n            const alerta = {\r\n                msg: error.response.data.msg,\r\n                categoria: 'alerta-error'\r\n            }\r\n\r\n            dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // Cierra la sesión del usuario\r\n    const cerrarSesion = () => {\r\n        dispatch({\r\n            type: CERRAR_SESION\r\n        })\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider\r\n            value={{\r\n                token: state.token,\r\n                autenticado: state.autenticado,\r\n                usuario: state.usuario,\r\n                mensaje: state.mensaje,\r\n                cargando: state.cargando,\r\n                registrarUsuario,\r\n                iniciarSesion,\r\n                usuarioAutenticado,\r\n                cerrarSesion\r\n            }}\r\n        >{props.children}\r\n\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\nexport default AuthState;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthContext from '../../context/autenticacion/authContext';\r\n\r\nconst RutaPrivada = ({ component: Component, ...props  }) => {\r\n\r\n    const authContext = useContext(AuthContext);\r\n    const { autenticado, cargando, usuarioAutenticado } = authContext;\r\n\r\n    useEffect(() => {\r\n        usuarioAutenticado();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return ( \r\n        <Route { ...props } render={ props => !autenticado && !cargando ?  (\r\n            <Redirect to=\"/\" />\r\n        )  : (\r\n            <Component {...props} />\r\n        ) } />\r\n\r\n     );\r\n}\r\n \r\nexport default RutaPrivada;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Login from './components/auth/Login';\r\nimport NuevaCuenta from './components/auth/NuevaCuenta';\r\nimport Proyectos from './components/proyectos/Proyectos';\r\n\r\nimport ProyectoState from './context/proyectos/proyectoState';\r\nimport TareaState from './context/tareas/tareaState';\r\nimport AlertaState from './context/alertas/alertaState';\r\nimport AuthState from './context/autenticacion/authState';\r\nimport tokenAuth from './config/token';\r\nimport RutaPrivada from './components/rutas/RutaPrivada';\r\n\r\n// Revisar si tenemos un token\r\nconst token = localStorage.getItem('token');\r\nif(token) {\r\n  tokenAuth(token);\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <ProyectoState>\r\n      <TareaState>\r\n        <AlertaState>\r\n          <AuthState>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Login} />\r\n                    <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\r\n                    <RutaPrivada exact path=\"/proyectos\" component={Proyectos} />\r\n                </Switch>\r\n            </Router>\r\n          </AuthState>\r\n        </AlertaState>\r\n      </TareaState>\r\n    </ProyectoState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}